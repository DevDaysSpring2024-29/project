import logging
import telegram
import enum

from bot import handler_type
from models import room, entry
from service.interface import ServiceInterface
from providers.interface import ProviderKind

from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CallbackContext, ContextTypes
from telegram.ext import CommandHandler, MessageHandler, ConversationHandler
from telegram.ext import filters

__all__ = ["QuoBot"]


# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


class QuoBotState(enum.Enum):
    CHOOSE_HOST_SERVICE_TYPE = enum.auto()
    WAITING_FOR_ROOM_NUMBER = enum.auto()
    HOST_LOBBY = enum.auto()
    QUERY_ENTRY = enum.auto()
    WAITING_FOR_HOST_TO_START = enum.auto()
    VOTE_IN_PROGRESS = enum.auto()
    WAITING_FOR_VOTE = enum.auto()


def divide_chunks(l, n):
    for i in range(0, len(l), n):
        yield l[i:i + n]


class QuoBot:
    __initialized = False
    __instance = None

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super(QuoBot, cls).__new__(cls)

        return cls.__instance

    def __init__(self, token: str, service: ServiceInterface):
        if not self.__initialized:
            self.__initialized = True
            self.__token = token
            self.__service = service
            self.__app = Application.builder().token(self.__token).build()
            self._setup_handlers()

            self.__button_map = {
                "start": {"–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É": self.host_room, "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ": self.join_room},
                "choose_service_type": {
                    kind.value: self.choose_service_type
                    for kind in ProviderKind
                },
                "host_lobby": {
                    "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": self.vote_start,
                    "–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é": self.add_entry,
                },
                "vote": {
                    "–õ–∞–π–∫ üëç": self.vote,
                    "–î–∏–∑–ª–∞–π–∫ üëé": self.vote,
                },
            }

            self.__app.run_polling()

    def _setup_handlers(self):
        for handler_name in filter(lambda n: not n.startswith("_"), dir(self)):
            handler = getattr(self, handler_name)
            if callable(handler) and getattr(handler, "is_command", False):
                self.__app.add_handler(CommandHandler(handler_name, handler))

        host_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É$"), self.host_room)
            ],
            states={
                QuoBotState.CHOOSE_HOST_SERVICE_TYPE: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.choose_service_type)
                ],
                QuoBotState.HOST_LOBBY: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.Regex("^–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ$"), self.vote_start),
                    ConversationHandler(
                        entry_points=[
                            MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é$"), self.add_entry)
                        ],
                        states={
                            QuoBotState.QUERY_ENTRY: [
                                MessageHandler(filters.TEXT & ~filters.COMMAND, self.query_entry)
                            ],
                        },
                        fallbacks=[],
                    ),
                ],
                QuoBotState.VOTE_IN_PROGRESS: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.vote_question)
                ],
                QuoBotState.WAITING_FOR_VOTE: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.vote)
                ],
            },
            fallbacks=[],
            block=False,
        )
        self.__app.add_handler(host_handler)

        join_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ$"), self.join_room)],
            states={
                QuoBotState.WAITING_FOR_ROOM_NUMBER: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.join_room_by_id),
                ],
                QuoBotState.VOTE_IN_PROGRESS: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.vote_start)],
                QuoBotState.WAITING_FOR_VOTE: [
                    MessageHandler(filters.Regex("^–í—ã–π—Ç–∏$"), self.leave_room),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.vote)],
            },
            fallbacks=[],
            block=False,
        )
        self.__app.add_handler(join_handler)

    @handler_type.command
    async def start(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [[button_option for button_option in self.__button_map["start"].keys()]]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ü—Ä–∏–≤–µ—Ç! –Ø QuoRoom –ë–æ—Ç. –¢—ã —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∏ –≤ –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ",
                                       reply_markup=reply_markup)

    @handler_type.command
    async def join_room(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [["–í—ã–π—Ç–∏"]]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–í–≤–µ–¥–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã:",
                                       reply_markup=reply_markup)

        return QuoBotState.WAITING_FOR_ROOM_NUMBER

    async def join_room_by_id(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            room_id = int(update.message.text)
        except:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–Ω–∞—Ç—ã: \"{}\"".format(update.message.text))
            return await self.join_room(update, context)


        user_id = update.effective_chat.id

        try:
            await self.__service.join_room(str(user_id), room_id)
        except:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ö–æ–º–Ω–∞—Ç–∞ \"{}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".format(update.message.text))
            return await self.join_room(update, context)

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {}".format(room_id))

        participants = await self.__service.get_room_participants(str(user_id))
        for participant in participants:
            if participant == str(user_id):
                continue

            await context.bot.send_message(chat_id=participant,
                                            text="@{} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!".format(update.effective_user.username))

        return await self.wait_for_start(update, context)

    async def wait_for_start(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                        text="–û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞...")

        await self.__service.wait_start(str(update.effective_chat.id))

        return await self.next_vote(update, context)

    @handler_type.command
    async def add_entry(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [["–í—Å–µ –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã"]]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Ü—é:",
                                       reply_markup=reply_markup)
        return QuoBotState.QUERY_ENTRY

    @handler_type.command
    async def query_entry(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        new_entry = update.message.text
        if new_entry == "–í—Å–µ –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã":
            buttons = [[button_option for button_option in self.__button_map["host_lobby"].keys()]]
            reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                        text="–ó–∞–ø—É—Å–∫–∞–µ–º?",
                                        reply_markup=reply_markup)
            return ConversationHandler.END

        user_id = update.effective_chat.id

        entry_obj = entry.ProviderEntry(name=str(new_entry), descr=None, picture_url=None, rating=None, price=None)

        await self.__service.add_entry(str(user_id), entry_obj)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–û–ø—Ü–∏—è \"{}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞".format(new_entry))

        return await self.add_entry(update, context)

    @handler_type.command
    async def vote_start(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_chat.id

        participants = await self.__service.get_room_participants(str(user_id))
        for participant in participants:
            await context.bot.send_message(chat_id=participant,
                                        text="–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ...")

        await self.__service.start_vote(str(user_id))


        for participant in participants:
            await context.bot.send_message(chat_id=participant,
                                            text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")

        return await self.next_vote(update, context)

    @handler_type.command
    async def host_room(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = list(divide_chunks([button_option for button_option in self.__button_map["choose_service_type"].keys()], 3)) + [["–í—ã–π—Ç–∏"]]

        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å?",
                                       reply_markup=reply_markup)
        return QuoBotState.CHOOSE_HOST_SERVICE_TYPE

    async def next_vote(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [
            [button_option for button_option in self.__button_map["vote"].keys()],
            ["–í—ã–π—Ç–∏"],
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)

        user_id = update.effective_chat.id
        curr_option, maybe_match = await self.__service.current_option(str(user_id))

        query_text = "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –ø—Ä–æ\n{}?".format(curr_option["name"])
        if curr_option["descr"]:
            query_text += "\n{}".format(curr_option["descr"])

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=query_text,
                                       reply_markup=reply_markup)
        return QuoBotState.WAITING_FOR_VOTE

    async def choose_service_type(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        provider_name = update.message.text
        user_id = update.effective_chat.id

        try:
            _ = ProviderKind(provider_name)
        except:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                        text="–ê —è –ø—Ä–æ —Ç–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –∑–Ω–∞—é... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return self.host_room(update, context)


        params = room.RoomParams(
            provider_name=provider_name or "",
            filters={},
        )

        room_id = await self.__service.create_room(str(user_id), params)

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:")
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="{}".format(room_id))

        buttons = [
            [button_option for button_option in self.__button_map["host_lobby"].keys()],
            ["–í—ã–π—Ç–∏"],
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                                       reply_markup=reply_markup)

        return QuoBotState.HOST_LOBBY

    @handler_type.command
    async def vote_question(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.next_vote(update, context)

    @handler_type.command
    async def leave_room(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_chat.id
        try:
            participants = await self.__service.get_room_participants(str(user_id))
            await self.__service.leave_room(str(user_id))

            for participant in participants:
                if participant == str(user_id):
                    continue

                await context.bot.send_message(chat_id=participant,
                                                text="@{} –≤—ã—à–µ–ª".format(update.effective_user.username))

        except:
            logging.info("left")

        buttons = [
            [button_option for button_option in self.__button_map["start"].keys()],
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)

        await context.bot.send_message(chat_id=user_id,
                                        text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã",
                                        reply_markup=reply_markup)

        return ConversationHandler.END


    @handler_type.command
    async def vote(self, update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
        vote_response = update.message.text
        user_id = update.effective_chat.id

        if vote_response == "–í—ã–π—Ç–∏":
            return await self.leave_room(update, context)

        is_liked = (vote_response == "–õ–∞–π–∫ üëç")
        await self.__service.vote(str(user_id), is_liked)

        got_match = await self.__service.get_match(str(user_id))
        if got_match:
            participants = await self.__service.get_room_participants(str(user_id))

            match_txt = "You've got a match: {}!".format(got_match["name"])
            if got_match["descr"]:
                match_txt += "\n{}".format(got_match["descr"])

            buttons = [[button_option for button_option in self.__button_map["start"].keys()]]
            reply_markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)

            for participant in participants:
                await context.bot.send_message(chat_id=participant,
                                               text=match_txt,
                                               reply_markup=reply_markup)
            return ConversationHandler.END

        return await self.next_vote(update, context)
